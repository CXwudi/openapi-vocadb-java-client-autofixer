/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package cx.mikufan.vocadbapiclient.api;

import cx.mikufan.vocadbapiclient.model.AdvancedSearchFilterParams;
import cx.mikufan.vocadbapiclient.model.ArtistAlbumParticipationStatus;
import cx.mikufan.vocadbapiclient.model.CommentForApiContract;
import cx.mikufan.vocadbapiclient.model.ContentLanguagePreference;
import cx.mikufan.vocadbapiclient.model.EntryStatus;
import java.time.LocalDateTime;
import cx.mikufan.vocadbapiclient.model.LyricsForSongContract;
import cx.mikufan.vocadbapiclient.model.NameMatchMode;
import cx.mikufan.vocadbapiclient.model.PVService;
import cx.mikufan.vocadbapiclient.model.PVServices;
import cx.mikufan.vocadbapiclient.model.RatedSongForUserForApiContract;
import cx.mikufan.vocadbapiclient.model.RelatedSongsContract;
import cx.mikufan.vocadbapiclient.model.SongForApiContract;
import cx.mikufan.vocadbapiclient.model.SongForApiContractPartialFindResult;
import cx.mikufan.vocadbapiclient.model.SongOptionalFields;
import cx.mikufan.vocadbapiclient.model.SongRatingContract;
import cx.mikufan.vocadbapiclient.model.SongSortRule;
import cx.mikufan.vocadbapiclient.model.SongVocalistSelection;
import cx.mikufan.vocadbapiclient.model.TopSongsDateFilterType;
import cx.mikufan.vocadbapiclient.model.UserOptionalFields;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SongApiApi
 */
@Ignore
public class SongApiApiTest {

    private final SongApiApi api = new SongApiApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsByPvGetTest() {
        PVService pvService = null;
        String pvId = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        SongForApiContract response = api.apiSongsByPvGet(pvService, pvId, fields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsCommentsCommentIdDeleteTest() {
        Integer commentId = null;
        api.apiSongsCommentsCommentIdDelete(commentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsCommentsCommentIdPostTest() {
        Integer commentId = null;
        CommentForApiContract commentForApiContract = null;
        api.apiSongsCommentsCommentIdPost(commentId, commentForApiContract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsGetTest() {
        String query = null;
        String songTypes = null;
        LocalDateTime afterDate = null;
        LocalDateTime beforeDate = null;
        List<String> tagName = null;
        List<Integer> tagId = null;
        Boolean childTags = null;
        Boolean unifyTypesAndTags = null;
        List<Integer> artistId = null;
        ArtistAlbumParticipationStatus artistParticipationStatus = null;
        Boolean childVoicebanks = null;
        Boolean includeMembers = null;
        Boolean onlyWithPvs = null;
        PVServices pvServices = null;
        Integer since = null;
        Integer minScore = null;
        Integer userCollectionId = null;
        Integer releaseEventId = null;
        Integer parentSongId = null;
        EntryStatus status = null;
        List<AdvancedSearchFilterParams> advancedFilters = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        SongSortRule sort = null;
        Boolean preferAccurateMatches = null;
        NameMatchMode nameMatchMode = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        Integer minMilliBpm = null;
        Integer maxMilliBpm = null;
        Integer minLength = null;
        Integer maxLength = null;
        SongForApiContractPartialFindResult response = api.apiSongsGet(query, songTypes, afterDate, beforeDate, tagName, tagId, childTags, unifyTypesAndTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, onlyWithPvs, pvServices, since, minScore, userCollectionId, releaseEventId, parentSongId, status, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, nameMatchMode, fields, lang, minMilliBpm, maxMilliBpm, minLength, maxLength);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsHighlightedGetTest() {
        ContentLanguagePreference languagePreference = null;
        SongOptionalFields fields = null;
        List<SongForApiContract> response = api.apiSongsHighlightedGet(languagePreference, fields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdCommentsGetTest() {
        Integer id = null;
        List<CommentForApiContract> response = api.apiSongsIdCommentsGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdCommentsPostTest() {
        Integer id = null;
        CommentForApiContract commentForApiContract = null;
        CommentForApiContract response = api.apiSongsIdCommentsPost(id, commentForApiContract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdDeleteTest() {
        Integer id = null;
        String notes = null;
        api.apiSongsIdDelete(id, notes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdDerivedGetTest() {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        List<SongForApiContract> response = api.apiSongsIdDerivedGet(id, fields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdGetTest() {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        SongForApiContract response = api.apiSongsIdGet(id, fields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdRatingsGetTest() {
        Integer id = null;
        UserOptionalFields userFields = null;
        ContentLanguagePreference lang = null;
        List<RatedSongForUserForApiContract> response = api.apiSongsIdRatingsGet(id, userFields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdRatingsPostTest() {
        Integer id = null;
        SongRatingContract songRatingContract = null;
        api.apiSongsIdRatingsPost(id, songRatingContract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsIdRelatedGetTest() {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        RelatedSongsContract response = api.apiSongsIdRelatedGet(id, fields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsLyricsLyricsIdGetTest() {
        Integer lyricsId = null;
        LyricsForSongContract response = api.apiSongsLyricsLyricsIdGet(lyricsId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsNamesGetTest() {
        String query = null;
        NameMatchMode nameMatchMode = null;
        Integer maxResults = null;
        List<String> response = api.apiSongsNamesGet(query, nameMatchMode, maxResults);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSongsTopRatedGetTest() {
        Integer durationHours = null;
        LocalDateTime startDate = null;
        TopSongsDateFilterType filterBy = null;
        SongVocalistSelection vocalist = null;
        Integer maxResults = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference languagePreference = null;
        List<SongForApiContract> response = api.apiSongsTopRatedGet(durationHours, startDate, filterBy, vocalist, maxResults, fields, languagePreference);

        // TODO: test validations
    }
    
}
