/*
 * VocaDbWeb
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package mikufan.cx.vocadbapiclient.api;

import mikufan.cx.vocadbapiclient.model.AdvancedSearchFilterParams;
import mikufan.cx.vocadbapiclient.model.AlbumForApiContract;
import mikufan.cx.vocadbapiclient.model.AlbumForApiContractPartialFindResult;
import mikufan.cx.vocadbapiclient.model.AlbumForUserForApiContract;
import mikufan.cx.vocadbapiclient.model.AlbumOptionalFields;
import mikufan.cx.vocadbapiclient.model.AlbumReviewContract;
import mikufan.cx.vocadbapiclient.model.AlbumSortRule;
import mikufan.cx.vocadbapiclient.model.ArtistAlbumParticipationStatus;
import mikufan.cx.vocadbapiclient.model.CommentForApiContract;
import mikufan.cx.vocadbapiclient.model.ContentLanguagePreference;
import mikufan.cx.vocadbapiclient.model.DiscType;
import mikufan.cx.vocadbapiclient.model.EntryStatus;
import java.time.LocalDateTime;
import mikufan.cx.vocadbapiclient.model.NameMatchMode;
import mikufan.cx.vocadbapiclient.model.SongInAlbumForApiContract;
import mikufan.cx.vocadbapiclient.model.SongOptionalFields;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlbumApiApi
 */
@Ignore
public class AlbumApiApiTest {

    private final AlbumApiApi api = new AlbumApiApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsCommentsCommentIdDeleteTest() {
        Integer commentId = null;
        api.apiAlbumsCommentsCommentIdDelete(commentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsCommentsCommentIdPostTest() {
        Integer commentId = null;
        CommentForApiContract commentForApiContract = null;
        api.apiAlbumsCommentsCommentIdPost(commentId, commentForApiContract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsGetTest() {
        String query = null;
        DiscType discTypes = null;
        List<String> tagName = null;
        List<Integer> tagId = null;
        Boolean childTags = null;
        List<Integer> artistId = null;
        ArtistAlbumParticipationStatus artistParticipationStatus = null;
        Boolean childVoicebanks = null;
        Boolean includeMembers = null;
        String barcode = null;
        EntryStatus status = null;
        LocalDateTime releaseDateAfter = null;
        LocalDateTime releaseDateBefore = null;
        List<AdvancedSearchFilterParams> advancedFilters = null;
        Integer start = null;
        Integer maxResults = null;
        Boolean getTotalCount = null;
        AlbumSortRule sort = null;
        Boolean preferAccurateMatches = null;
        Boolean deleted = null;
        NameMatchMode nameMatchMode = null;
        AlbumOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        AlbumForApiContractPartialFindResult response = api.apiAlbumsGet(query, discTypes, tagName, tagId, childTags, artistId, artistParticipationStatus, childVoicebanks, includeMembers, barcode, status, releaseDateAfter, releaseDateBefore, advancedFilters, start, maxResults, getTotalCount, sort, preferAccurateMatches, deleted, nameMatchMode, fields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdCommentsGetTest() {
        Integer id = null;
        List<CommentForApiContract> response = api.apiAlbumsIdCommentsGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdCommentsPostTest() {
        Integer id = null;
        CommentForApiContract commentForApiContract = null;
        CommentForApiContract response = api.apiAlbumsIdCommentsPost(id, commentForApiContract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdDeleteTest() {
        Integer id = null;
        String notes = null;
        api.apiAlbumsIdDelete(id, notes);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdGetTest() {
        Integer id = null;
        AlbumOptionalFields fields = null;
        SongOptionalFields songFields = null;
        ContentLanguagePreference lang = null;
        AlbumForApiContract response = api.apiAlbumsIdGet(id, fields, songFields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdReviewsGetTest() {
        Integer id = null;
        String languageCode = null;
        List<AlbumReviewContract> response = api.apiAlbumsIdReviewsGet(id, languageCode);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdReviewsPostTest() {
        Integer id = null;
        AlbumReviewContract albumReviewContract = null;
        AlbumReviewContract response = api.apiAlbumsIdReviewsPost(id, albumReviewContract);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdReviewsReviewIdDeleteTest() {
        Integer reviewId = null;
        String id = null;
        api.apiAlbumsIdReviewsReviewIdDelete(reviewId, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdTracksFieldsGetTest() {
        Integer id = null;
        List<String> field = null;
        Integer discNumber = null;
        ContentLanguagePreference lang = null;
        List<Map<String, String>> response = api.apiAlbumsIdTracksFieldsGet(id, field, discNumber, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdTracksGetTest() {
        Integer id = null;
        SongOptionalFields fields = null;
        ContentLanguagePreference lang = null;
        List<SongInAlbumForApiContract> response = api.apiAlbumsIdTracksGet(id, fields, lang);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsIdUserCollectionsGetTest() {
        Integer id = null;
        ContentLanguagePreference languagePreference = null;
        List<AlbumForUserForApiContract> response = api.apiAlbumsIdUserCollectionsGet(id, languagePreference);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsNamesGetTest() {
        String query = null;
        NameMatchMode nameMatchMode = null;
        Integer maxResults = null;
        List<String> response = api.apiAlbumsNamesGet(query, nameMatchMode, maxResults);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsNewGetTest() {
        ContentLanguagePreference languagePreference = null;
        AlbumOptionalFields fields = null;
        List<AlbumForApiContract> response = api.apiAlbumsNewGet(languagePreference, fields);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiAlbumsTopGetTest() {
        List<Integer> ignoreIds = null;
        ContentLanguagePreference languagePreference = null;
        AlbumOptionalFields fields = null;
        List<AlbumForApiContract> response = api.apiAlbumsTopGet(ignoreIds, languagePreference, fields);

        // TODO: test validations
    }
    
}
